=================================================================
Selected problems with df = pd.Dataframes in user-defined objects
=================================================================
1) It is difficult/impossible to have object inheriting from pd.Dataframe
 Reason: numerous df methods return new df - these are no longer our objects!
2) Solution of problem (1): inheritance -> composition
 Reason: our object has a property containing df, which works in standard way
3) Adding rows to Dataframes in loops is slow and inefficient
 (why do we use it? => for our small datasets the speed is Ok
------------------------------------------------------------------------------- 
* More details = see the explanation below (in Czech)

ad 1) PRAKTICKY NELZE mit tridu, ktera je potomkem df = pd.DataFrame
 a) Rada metod df vraci NOVY df, ktery uz ovsem neni potomkem nasi tridy,
    takze na tomto nove vracenem objektu prestanou fungovat nase metody tridy!
 b) Konkretnim prikladem je metoda df.append, ktera vraci novy df,
    coz uz ovsem neni nas objekt, ale obecny DataFrame.
 c) Resenim je misto dedicnosti/inheritance pouzit composition/kompozici:
    nas objekt ma (treba i jedinou) property, ktera je pd.DataFrame,
	tj. zahrnuje v sobe (has a) Dataframe misto aby byla (is a) DataFrame.
 => https://stackoverflow.com/q/24504756
 
ad 2) INHERITANCE vs. COMPOSITION
 * uzce souvisi s predchozim bodem
 * obecne doporuceni: composition je v mnoha pripadech lepsi a jednodussi
 * prakticke provedeni: objekt ma (has a) property, ktera je dalsim objektem
 * Pr: nas objekt ma vlastnost df, ktera je pd.DataFrame = dalsi objekt
       pak muzu delat veci jako: muj_objekt.df.append...
	   (pricemz zrovna zde si musim dat pozor, ze tim dostanu NOVY dataframe
 * velmi dobry clanek:
 => https://realpython.com/inheritance-composition-python/
   
ad 3) POSTUPNE PRIDAVANI RADKU DO DATAFRAME JE POMALE A NEDOPORUCOVANE!
 * v nasem programu to mame - je jednoduchy a bezi rychle i tak
 * obecne se to nedoporucuje - je to pomale a u velkych df velmi pomale
 => https://newbedev.com/improve-row-append-performance-on-pandas-dataframes
